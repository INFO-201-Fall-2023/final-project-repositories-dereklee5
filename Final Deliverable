#Final Project: Final Deliverable
library(dplyr)
library(stringr)
library(ggplot2)
library(shiny)
library(plotly)

source("data_cleaning.R")
df <- read.csv("Final_Clean_DF.csv")
map_data <- map_data('world')

intro_pg <- tabPanel("Introduction",
  h1("Analyzing the Change in Ocean Conditions with the Decline in Mental Wellbeing Across the World"),
  br(),
  p("Context: Our project aims to explore the correlation between declining ocean conditions and their impacts on 
peopleâ€™s mental well-being across the world. Through our analysis, we hope to"),
  br(),
  p("Insert explanation on why this is interesting - use previous project assignments"),
  br(),
  p("Datasets + Analysis"),
  br(),
  p("Conclusion")
)

controls <- sidebarPanel(
  h1("Control Panel"),
  selectInput(
    inputId = "data_type",
    label = "Select a Category:",
    choices = filter_choice_df$filter_choices
  ),
  selectInput(
    inputId = "second_type",
    label = "Select a Second Category:",
    choices = filter_choice_df$filter_choices
  )
)
view_05 <- tabPanel("2005", plotOutput(outputId = "barchart_5"))
view_18 <- tabPanel("2018", plotOutput(outputId = "barchart_18"))
both_view <- tabPanel("2005-2018", h3("Change between 2005 and 2018"), plotOutput(outputId = "linechart"))
viz_pg_1 <- tabPanel("Change Over Time",
                     fluidPage(
                       titlePanel("Comparing Ocean Conditions and Mental Wellbeing Over Time"),
                       sidebarLayout(
                         controls,
                         mainPanel(
                           tabsetPanel(
                             view_05,
                             view_18,
                             both_view
                           )
                         )
                       )
                     )
)

plot_view <- tabPanel("Plot", plotOutput(outputId = "contrast_map"))
main_viz_3 <- mainPanel(
  tabsetPanel(plot_view)
)

viz_page_3 <- tabPanel("Analysis",
                       fluidPage(
                         titlePanel("Contrasts Data Story"),
                         sidebarLayout(controls_year, main_viz_3)
                       )
)

ui <- navbarPage("Final Deliverable",
                 intro_pg,
                 viz_pg_1,
                 #viz_pg_2,
                 viz_pg_3
                 #summary_pg
)

server <- function(input, output){
  output$barchart_5 <- renderPlot({
    if(input$data_type == "All" && input$second_type == "All") {
      data_cat <- data_05
    } else if(input$data_type == "All") {
      data_cat <- filter(data_05, Categories == input$second_type)
    } else if (input$second_type == "All") {
      data_cat <- filter(data_05, Categories == input$data_type)
    } else {
      data_cat <- filter(data_05, Categories == input$data_type | Categories == input$second_type)
    }
    p <- ggplot(data_cat, aes(x = Categories, y = V1, fill = Categories)) + geom_bar(stat = "identity") + labs(x = "Variables", y = "Values", fill = "Variables")
    return(p)
  })
  output$barchart_18 <- renderPlot({
    if(input$data_type == "All" && input$second_type == "All") {
      data_cat <- data_18
    } else if(input$data_type == "All") {
      data_cat <- filter(data_18, Categories == input$second_type)
    } else if (input$second_type == "All") {
      data_cat <- filter(data_18, Categories == input$data_type)
    } else {
      data_cat <- filter(data_18, Categories == input$data_type | Categories == input$second_type)
    }
    a <- ggplot(data_cat, aes(x = Categories, y = V1, fill = Categories)) + geom_bar(stat = "identity") + labs(x = "Variables", y = "Values", fill = "Variables")
    return(a)
  })
  output$linechart <- renderPlot({
    df_long <- tidyr::gather(avg_df, key = "Variable", value = "Value", -Year)
    if(input$data_type == "All" && input$second_type == "All") {
      data_cat <- df_long
    } else if(input$data_type == "All") {
      data_cat <- filter(df_long, Variable == input$second_type)
    } else if (input$second_type == "All") {
      data_cat <- filter(df_long, Variable == input$data_type)
    } else {
      data_cat <- filter(df_long, Variable == input$data_type | Variable == input$second_type)
    }
    b <- ggplot(data_cat, aes(x = Year, y = Value, color = Variable)) +
      geom_line()
    return(b)
  })
  
  output$contrast_map <- renderPlot({
    year_df <- filter(df, Year == input$year)
    quartile <- round(nrow(year_df) / 4)
    high <- year_df[order(year_df$Life.Ladder, decreasing = T), ][1:quartile, ]
    low <- year_df[order(year_df$Life.Ladder), ][1:quartile, ]
    
    h_df <- left_join(high, map_data, by=c('Country.Name' = 'region'))
    l_df <- left_join(low, map_data, by=c('Country.Name' = 'region'))
    
    p <- ggplot() +
      geom_polygon(data = map_data("world"),
                   aes(x=long, y=lat, group = group),
                   color = 'darkgrey', fill = 'lightgrey') +
      geom_polygon(data = h_df,
                   aes(x=long, y=lat, group = group,
                       fill = 'Upper Quartile')) +
      geom_polygon(data = l_df,
                   aes(x=long, y=lat, group = group,
                       fill = 'Lower Quartile')) +
      ggtitle(paste("Lower and Upper Quartile Life Ladder Score Countries in",
                    input$year)) +
      guides(fill=guide_legend(title="Colors")) +
      scale_fill_manual(values = c('Upper Quartile' = 'royalblue', 'Lower Quartile' = 'firebrick'))
    
    return(p)
  })
}


shinyApp(ui = ui, server = server)
